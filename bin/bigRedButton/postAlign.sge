#!/bin/bash
##################################################################################
##### (1) convert scores from pairwise file descriptors into a pairwise matrix
##### (2) perform hierarchical clustering and bootstrapping
##################################################################################
##  SGE submission options  
#$ -cwd                       	# Change to current working directory 
#$ -V                         	# Export environment variables into script 
#$ -S /bin/bash					# Enforce bash (don't touch!!!!)
#$ -j y

# Input ARGS
# $1 = /path/to/output
# $2 = algorithm

if [[ ! -d ${1}/${2} ]]; then mkdir ${1}/${2} ; fi

# merge and tidy up
if [[ ! -e ${1}/${2}/srtd.out.gz ]]; then
  echo -e "\e[93m[ NOTE ]\e[0m Merging and sorting alignment files..."
## Is the perl script here necessary?  
#	cat ${1}/array_*.${2} | ${PATH_TO_SGE_SCRIPTS}/uniqCol1maxCol2.pl - 3,4 5 | sort -k 3,3n -k 4,4n > ${1}/${2}/srtd.out
#	cat ${1}/array_*.${2} | sed -e 's/___[0-9]*___[0-9]*//g' | ${PATH_TO_SGE_SCRIPTS}/uniqCol1maxCol2.pl - 3,4 5 | sort -k 3,3n -k 4,4n > ${1}/${2}/srtd.out
	cat ${1}/array_*.${2} | sort -k 3,3n -k 4,4n > ${1}/${2}/srtd.out
#	rm ${1}/array_*.${2}
	if [[ -e ${1}/DotAligner.log ]]; then gzip ${1}/DotAligner.log ; fi
else
  echo -e "\e[93m[ NOTE ]\e[0m Extracting sorted output from previous run..."
	gunzip ${1}/${2}/srtd.out.gz
fi

#################################################################
# Build matrix from pairwise scores
echo -e "\e[93m[ NOTE ]\e[0m Building similarity matrix..."
num_cols=$(( `cut -d " " -f 3 ${1}/${2}/srtd.out | grep -w 1 | wc -l` ))
awk '{gsub(/,/,"\t");if($3==$4){print $3,$4,$5}else{print $3,$4,$5"\n"$4,$3,$5}}' ${1}/${2}/srtd.out \
	| sort -k 1,1n -k 2,2n | awk -v len=$num_cols 'BEGIN{ORS="	"}{print $3," "; if(NR%len == 0){print "\n"}}' \
	> /tmp/${2}_srtd.matrix

#################################################################
# Get identifiers (fasta headers)
cut -d " " -f 1 ${1}/${2}/srtd.out | sed 's/___[0-9]*//g' | uniq | while read line 
do
	echo ${line##*/} | sed 's/_dp.ps//'
done > /tmp/${2}_srtd.ids

#################################################################
# Clean up and transfer
gzip ${1}/${2}/srtd.out
mv /tmp/${2}_srtd.ids ${1}/${2}/srtd.ids
mv /tmp/${2}_srtd.matrix ${1}/${2}/srtd.matrix

#################################################################
# Perform hierarchical clustering, bootstrapping, and extract clusters
#Usage: /path/to/Rscript [--options] [-e expr] file [args]
echo -e "\e[93m[ NOTE ]\e[0m Performing hierarchical clustering and bootstrapping..."
R_BIN=$( which Rscript ) 
if [[ -z $R_BIN ]]; then
	echo -e "\e[91m[ ERROR ]\e[0m Rscript binary not found! Have you loaded the module/PATH properly? "
	exit 1 
fi
$R_BIN ${PATH_TO_SGE_SCRIPTS}/clusterStrap.R ${1}/${2}/srtd.matrix ${1}/${2}/srtd.ids ${NSLOTS} ${BOOTSTRAPS} ${ALPHA_STAT} ${BETA_STAT} ${MAX_PER_CLUSTER}

#################################################################
# User friendly output verification
if [[ ! -e ${1}/${2}/srtd_a${ALPHA_STAT}_clusters ]]; then 
	echo -e "\e[91m[ WARNING ]\e[0m No clusters in output: "${1}"/"${2}"/srtd_a"${ALPHA_STAT}"_clusters"
  echo -e "            Double check files and parameters, or try using a lower alpha statistic "
	exit 1 
fi
if [[ ! -e ${1}/${2}/srtd.newick ]]; then 
  echo -e "\e[91m[ ERROR ]\e[0m No clustering output file detected: "${1}"/"${2}"/srtd.newick"
  exit 1
fi

#################################################################
#get FASTA file for each cluster
echo -e "\e[93m[ NOTE ]\e[0m Extracing sequences from clusters"
#Is this line really necessary for bedtools output? 
#gunzip -c ${1}/${2}/srtd.out.gz | awk '{print $1"\n"$2}' | sort | uniq -c | awk '{k=$2;gsub(/___[0-9]*/,"",k); print k,$2,$1}' | ${PATH_TO_SGE_SCRIPTS}/uniqCol1maxCol2.pl - 1 3 > ${1}/${2}/srtd.most.similar.windows

# No longer required, as this is done in R directly
#if [[ ! -d ${1}/${2}/clusters ]]; then mkdir ${1}/${2}/clusters; fi
CLNR=0
awk '/"/' ${1}/${2}/srtd_a${ALPHA_STAT}_clusters | while read LINE; do
  CLNR=$((CLNR+1));
  # erase old file if present
  if [[ -e ${1}/${2}/clusters/cluster.${CLNR}.fa ]]; then 
    rm ${1}/${2}/clusters/cluster.${CLNR}.fa
  fi

#################################################################
####    THIS NEEDS TO BE REVISED according to output of NEW clusterStrap.R SCRIPT
####    Namely, the fasta files for large clusters should be trimmed to the representative sub_clusters
  SEQS=$( echo  $LINE | awk '/"/{clnr++;for(i=2;i<=NF;i++){gsub(/"/,"");print $i}}' | wc -l )
  if [[ $SEQS -gt $MAX_PER_CLUSTER ]]; then 
    if [[ ! -e ${1}/${2}/clusters/sub_cluster_${CLNR}.ids ]]; then
      echo -e "\e[91m[ ERROR ]\e[0m No sub-cluster for large cluster no. "${CLNR}
    else
      ## NB -> Here, we write a sub-cluster to a cluster: This might be confusing but it simplifies the downstream analysis
      grep -m 1 -A 1 -f ${1}/${2}/clusters/sub_cluster_${CLNR}.ids ${1}/formatted_input.fa >> ${1}/${2}/clusters/cluster.${CLNR}.fa
    fi
  fi
  echo	$LINE | awk '/"/{clnr++;for(i=2;i<=NF;i++){gsub(/"/,"");print $i}}' | \
  			xargs -I {} grep -m 1 -A 1 "^>{}$" ${1}/formatted_input.fa  >> ${1}/${2}/clusters/cluster.${CLNR}.fa
  # echo $LINE | awk '/"/{clnr++;for(i=2;i<=NF;i++){gsub(/"/,"");print $i}}' | \
  #     xargs -I {} grep {} ${1}/${2}/srtd.most.similar.windows | \
	# 	  awk '{split($2,a,/\//);sub(/_dp.ps/,"",a[length(a)]); print a[length(a)]}' | \
	# 	  xargs -I {} grep -m 1 -A 1 "^>{}$" ${1}/formatted_input.fa | \
	# 	  awk '{if(/^>/){split($1,a,"___"); print a[1]}else{print $0}}' >> ${1}/${2}/clusters/cluster.${CLNR}.fa
  
done
